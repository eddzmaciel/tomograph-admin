{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","../node_modules/numeral/numeral.js","views/Invoice/InvoiceForm.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","__webpack_require__","d","__webpack_exports__","_objectSpread","_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","apply","search","insert","subString","start","reduce","array","callback","TypeError","t","len","k","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","join","base","suffixes","binary","unformatRegex","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray","exports","module","InvoiceForm","props","_this2","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__","getOptionsSelect","_ref","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","url","optionCreateFunction","response","wrap","_context","prev","feathers","service","find","sent","data","map","option","push","setState","optionsSelect","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","state","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","stop","_x2","_x3","onChange","path","newFormData","immutable","formData","onSend","_ref2","_callee2","_context2","_Users_eddzmaciel_Documents_www_Repositorios_aida_munecas_aida_munecas_panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_9__","log","_x4","onAddInvoicesCalculator","_callee3","initialDate","finalDate","dateMonth","_context3","selectedOption","month","year","moment","startOf","endOf","periodoInicio","periodoFin","empresa","create","dateStart","Date","dateEnd","subsidiariesId","concepto","lectura","energyCost","energy","unit","total","p","sum","scxNMEM","cels","subtotales","subtotalA","transmision","distribution","scxNoMEM","cenace","lostCharges","concept","subtotalB","breakdown","powerFactor","resume","loadInvoice","selectedType","onSaveInvoices","_callee4","_this","monthLabel","invoiceData","invoiceResult","jsonCFDI","_context4","months","fecha_inicio","fecha_fin","mes","label","conceptos","form","reportValidity","id","_id","InvoiceId","window","location","href","patch","params","openSuccess","monthYear","tipoUsuarios","empresas","years","tipos","tipo","nombre","query","_this3","columns","dataField","text","sort","formatter","cell","row","react__WEBPACK_IMPORTED_MODULE_10___default","createElement","style","fontWeight","numeral","_this$state","load","className","ref","reactstrap__WEBPACK_IMPORTED_MODULE_11__","xs","lg","md","size","offset","padding","paddingBottom","htmlFor","react_select__WEBPACK_IMPORTED_MODULE_16__","placeholder","o","event","marginBottom","color","onClick","background","valueYears","valueMonths","fontSize","potency","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_17___default","keyField","bootstrap4","striped","hover","subtotal","iva","marginTop","Component"],"mappings":"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","file":"static/js/26.556c7358.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});","import React, { Component } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Row,\n    Button,\n    Badge,\n    Label,\n    FormText,\n    FormGroup,\n    Input\n} from 'reactstrap';\nimport feathers from '../../feathers';\nimport axios from 'axios';\nimport immutable from 'object-path-immutable';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport Select from 'react-select';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport numeral from 'numeral';\nimport moment from 'moment';\nclass InvoiceForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.match.params.id,\n            data: [],\n            loadInvoice: false,\n            resume: {},\n            total: 0,\n            formData: {\n                periodoInicio: '',\n                periodoFin: '',\n                year: moment().format('YY'),\n                month: moment().format('MM')\n            },\n            openSuccess: false,\n            selectedOption: null,\n            monthYear: '',\n            tipoUsuarios: [],\n            empresas: [],\n            years: [\n                { value: '17', label: '2017' },\n                { value: '18', label: '2018' },\n                { value: '19', label: '2019' }\n            ],\n            months: [\n                { value: '01', label: 'Enero' },\n                { value: '02', label: 'Febrero' },\n                { value: '03', label: 'Marzo' },\n                { value: '04', label: 'Abril' },\n                { value: '05', label: 'Mayo' },\n                { value: '06', label: 'Junio' },\n                { value: '07', label: 'Julio' },\n                { value: '08', label: 'Agosto' },\n                { value: '09', label: 'Septiembre' },\n                { value: '10', label: 'Octubre' },\n                { value: '11', label: 'Noviembre' },\n                { value: '12', label: 'Diciembre' }\n            ]\n        };\n    }\n\n    async componentWillMount() {\n        console.log('id', this.state.id);\n        var _this = this;\n\n        var tipos = await feathers.service('types').find({});\n        console.log('Tipos:', tipos);\n\n        tipos = tipos.data.map(tipo => {\n            return {\n                value: tipo._id,\n                label: tipo.nombre\n            };\n        });\n\n        var empresas = await feathers.service('subsidiary').find({});\n\n        empresas = empresas.data.map(empresa => {\n            return {\n                value: empresa._id,\n                label: empresa.nombre\n            };\n        });\n\n        if (this.state.id != 'form') {\n            var findClient = await feathers.service('clients').find({\n                query: {\n                    _id: _this.state.id\n                }\n            });\n\n            this.setState({\n                empresas: empresas\n            });\n        } else {\n            this.setState({\n                empresas: empresas\n            });\n        }\n    }\n\n    getOptionsSelect = async (name, url, optionCreateFunction) => {\n        // var response = await axios.get(url);\n        var response = await feathers.service(url).find({});\n\n        var options = [];\n        response.data.map(option => {\n            options.push(optionCreateFunction(option));\n        });\n        this.setState({\n            optionsSelect: {\n                ...this.state.optionsSelect,\n                [name]: options\n            }\n        });\n    };\n\n    onChange = (path, value) => {\n        var newFormData = immutable.set(this.state.formData, path, value);\n\n        this.setState({\n            formData: newFormData\n        });\n    };\n\n    onSend = async formData => {\n        let _this = this;\n        console.log('Enviando...');\n    };\n\n    onAddInvoicesCalculator = async () => {\n        let initialDate = '';\n        let finalDate = '';\n        if (this.state.selectedOption === 'month') {\n            const dateMonth =\n                this.state.formData.month + '/' + this.state.formData.year;\n            initialDate = moment(dateMonth, 'MM-YYYY').startOf('month');\n            finalDate = moment(dateMonth, 'MM-YYYY').endOf('month');\n        } else if (this.state.selectedOption === 'range') {\n            initialDate = this.state.formData.periodoInicio;\n            finalDate = this.state.formData.periodoFin;\n        } else {\n            console.log('alert');\n        }\n\n        if (\n            this.state.formData.empresa != '' &&\n            initialDate != '' &&\n            finalDate != ''\n        ) {\n            const service = await feathers\n                .service('invoices-calculator')\n                .create({\n                    dateStart: new Date(initialDate),\n                    dateEnd: new Date(finalDate),\n                    subsidiariesId: this.state.formData.empresa\n                });\n\n            console.log('service Invoices-calculator', service);\n\n            if (service) {\n                this.setState({\n                    data: [\n                        {\n                            concepto: 'Energia (kWh)',\n                            lectura: service.energyCost.energy.unit,\n                            total: service.energyCost.energy.total\n                        },\n                        {\n                            concepto: 'Potencia',\n                            lectura: service.energyCost.p.unit,\n                            total: service.energyCost.p.total\n                        },\n                        {\n                            concepto: 'Suministro',\n                            lectura: service.energyCost.sum.unit,\n                            total: service.energyCost.sum.total\n                        },\n                        {\n                            concepto: 'SCXMEM',\n                            lectura: service.energyCost.scxNMEM.unit,\n                            total: service.energyCost.scxNMEM.total\n                        },\n                        {\n                            concepto: 'CELs',\n                            lectura: service.energyCost.cels.unit,\n                            total: service.energyCost.cels.total\n                        },\n                        {\n                            concepto: 'SubtotalA',\n                            lectura: '',\n                            total: service.subtotales.subtotalA\n                        },\n                        {\n                            concepto: 'Transmisión',\n                            lectura: service.energyCost.transmision.unit,\n                            total: service.energyCost.transmision.total\n                        },\n                        {\n                            concepto: 'Distribución',\n                            lectura: service.energyCost.distribution.unit,\n                            total: service.energyCost.distribution.total\n                        },\n                        {\n                            concepto: 'SCXN No MEM',\n                            lectura: service.energyCost.scxNoMEM.unit,\n                            total: service.energyCost.scxNoMEM.total\n                        },\n                        {\n                            concepto: 'CENACE',\n                            lectura: service.energyCost.cenace.unit,\n                            total: service.energyCost.cenace.total\n                        },\n                        {\n                            concepto: service.energyCost.lostCharges.concept,\n                            lectura: service.energyCost.lostCharges.unit,\n                            total: service.energyCost.lostCharges.total\n                        },\n                        {\n                            concepto: 'SubtotalB',\n                            lectura: '',\n                            total: service.subtotales.subtotalB\n                        },\n                        {\n                            concepto: 'Factor Potencia',\n                            lectura: '',\n                            total: service.breakdown.powerFactor\n                        }\n                    ],\n                    resume: service.breakdown,\n                    loadInvoice: true\n                });\n            }\n        } else {\n            console.log('FALSE');\n        }\n    };\n\n    selectedType = value => {\n        this.setState({\n            selectedOption: value\n        });\n    };\n\n    onSaveInvoices = async () => {\n        const _this = this;\n\n        let initialDate = '';\n        let finalDate = '';\n        if (this.state.selectedOption === 'month') {\n            const dateMonth =\n                this.state.formData.month + '/' + this.state.formData.year;\n            initialDate = moment(dateMonth, 'MM-YYYY').startOf('month');\n            finalDate = moment(dateMonth, 'MM-YYYY').endOf('month');\n        } else if (this.state.selectedOption === 'range') {\n            initialDate = this.state.formData.periodoInicio;\n            finalDate = this.state.formData.periodoFin;\n        } else {\n            console.log('alert');\n        }\n\n        if (initialDate !== '' && finalDate !== '') {\n            const monthLabel = this.state.months.find(function(item) {\n                return item.value === moment(initialDate).format('MM');\n            });\n            let invoiceData = {\n                fecha_inicio: initialDate,\n                fecha_fin: finalDate,\n                subsidiariesId: this.state.formData.empresa,\n                mes: monthLabel.label,\n                conceptos: this.state.data,\n                breakdown: this.state.resume\n            };\n\n            if (this.form.reportValidity()) {\n                if (this.state.id == 'form') {\n                    let invoiceResult = await feathers\n                        .service('invoices')\n                        .create(invoiceData);\n\n                    if (invoiceResult._id != undefined) {\n                        const jsonCFDI = {\n                            InvoiceId: invoiceResult._id\n                        };\n                        let cfdiResult = await feathers\n                            .service('cfdi')\n                            .create(jsonCFDI);\n\n                        window.location.href = '/#/facturacion';\n                    }\n                } else {\n                    let invoiceResult = await feathers\n                        .service('invoices')\n                        .patch(_this.state.id, _this.state.formData);\n                    if (invoiceResult._id != undefined) {\n                        window.location.href = '/#/facturacion';\n                    }\n                }\n            }\n        }\n    };\n\n    render() {\n        var indexNumber = 0;\n\n        const columns = [\n            {\n                dataField: 'concepto',\n                text: 'Concepto',\n                sort: true,\n\n                formatter: (cell, row) => {\n                    if (cell === 'SubtotalA' || cell === 'SubtotalB') {\n                        return <p style={{ fontWeight: 'bold' }}>{cell}</p>;\n                    } else {\n                        return cell;\n                    }\n                }\n            },\n\n            {\n                dataField: 'lectura',\n                text: 'Precio (kWh)',\n                sort: true,\n\n                formatter: (cell, row) => {\n                    return cell;\n                }\n            },\n            {\n                dataField: 'total',\n                text: 'Importe',\n                sort: true,\n                formatter: (cell, row) => {\n                    if (\n                        row.concepto === 'SubtotalA' ||\n                        row.concepto === 'SubtotalB'\n                    ) {\n                        return (\n                            <p style={{ fontWeight: 'bold' }}>\n                                ${numeral(cell).format('0.00')}\n                            </p>\n                        );\n                    } else {\n                        return <p>${numeral(cell).format('0.00')}</p>;\n                    }\n                }\n            }\n        ];\n        let {\n            formData,\n            openSuccess,\n            tipoUsuarios,\n            empresas,\n            resume,\n            loadInvoice,\n            load,\n            years,\n            months\n        } = this.state;\n        const valueFromId = id => tipoUsuarios.find(o => o.value === id);\n        const valueFromIdCompany = id => empresas.find(o => o.value === id);\n        const valueYears = id => years.find(o => o.value === id);\n        const valueMonths = id => months.find(o => o.value === id);\n\n        return (\n            <div className=\"animated fadeIn\">\n                <form ref={ref => (this.form = ref)}>\n                    <Row>\n                        <Col xs=\"12\" lg=\"12\">\n                            <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col md={12}>\n                                            <h4>Facturación</h4>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={12}>\n                                            <Row>\n                                                <Col\n                                                    md={{ size: 6, offset: 3 }}\n                                                >\n                                                    <Card\n                                                        style={{\n                                                            padding: '10px',\n                                                            paddingBottom:\n                                                                '20px'\n                                                        }}\n                                                    >\n                                                        <div className=\"form-group\">\n                                                            <label htmlFor=\"reference\">\n                                                                <strong>\n                                                                    Cliente\n                                                                </strong>\n                                                            </label>\n                                                            <Select\n                                                                placeholder=\"-- Seleccionar\"\n                                                                name=\"empresa\"\n                                                                value={valueFromIdCompany(\n                                                                    formData.empresa\n                                                                )}\n                                                                options={\n                                                                    empresas\n                                                                }\n                                                                onChange={event =>\n                                                                    this.onChange(\n                                                                        'empresa',\n                                                                        event.value\n                                                                    )\n                                                                }\n                                                            />\n                                                        </div>\n                                                        <Row\n                                                            style={{\n                                                                marginBottom:\n                                                                    '25px'\n                                                            }}\n                                                        >\n                                                            <Col\n                                                                md={{\n                                                                    size: 12\n                                                                }}\n                                                            >\n                                                                <Row>\n                                                                    <Col\n                                                                        md={12}\n                                                                    >\n                                                                        <Label htmlFor=\"Observations\">\n                                                                            Seleccione\n                                                                            el\n                                                                            tipo\n                                                                            de\n                                                                            busqueda\n                                                                        </Label>\n                                                                    </Col>\n                                                                    <Col md={6}>\n                                                                        <Button\n                                                                            color=\"primary\"\n                                                                            className=\"btn-square pull-right btn-block\"\n                                                                            onClick={() => {\n                                                                                this.selectedType(\n                                                                                    'month'\n                                                                                );\n                                                                            }}\n                                                                        >\n                                                                            Mes\n                                                                        </Button>\n                                                                    </Col>\n                                                                    <Col md={6}>\n                                                                        <Button\n                                                                            color=\"success\"\n                                                                            className=\"btn-square pull-right btn-block\"\n                                                                            onClick={() => {\n                                                                                this.selectedType(\n                                                                                    'range'\n                                                                                );\n                                                                            }}\n                                                                        >\n                                                                            Rango\n                                                                        </Button>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col\n                                                                md={{\n                                                                    size: 12\n                                                                }}\n                                                            >\n                                                                {this.state\n                                                                    .selectedOption !==\n                                                                null ? (\n                                                                    <Card\n                                                                        style={{\n                                                                            background:\n                                                                                '#ececec',\n                                                                            padding:\n                                                                                '10px',\n                                                                            paddingBottom:\n                                                                                '20px'\n                                                                        }}\n                                                                    >\n                                                                        {this\n                                                                            .state\n                                                                            .selectedOption ===\n                                                                        'month' ? (\n                                                                            <Row>\n                                                                                <Col\n                                                                                    md={\n                                                                                        6\n                                                                                    }\n                                                                                >\n                                                                                    <FormGroup>\n                                                                                        <Label htmlFor=\"hf-email\">\n                                                                                            Año\n                                                                                        </Label>\n                                                                                        <Select\n                                                                                            placeholder=\"-- Seleccionar\"\n                                                                                            name=\"years\"\n                                                                                            value={valueYears(\n                                                                                                formData.year\n                                                                                            )}\n                                                                                            options={\n                                                                                                years\n                                                                                            }\n                                                                                            onChange={event =>\n                                                                                                this.onChange(\n                                                                                                    [\n                                                                                                        'year'\n                                                                                                    ],\n                                                                                                    event.value\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                        <FormText className=\"help-block\">\n                                                                                            Seleccione\n                                                                                            mes\n                                                                                            *Obligatorio\n                                                                                        </FormText>\n                                                                                    </FormGroup>\n                                                                                </Col>\n                                                                                <Col\n                                                                                    md={\n                                                                                        6\n                                                                                    }\n                                                                                >\n                                                                                    <FormGroup>\n                                                                                        <Label htmlFor=\"hf-email\">\n                                                                                            Mes\n                                                                                        </Label>\n                                                                                        <Select\n                                                                                            placeholder=\"-- Seleccionar\"\n                                                                                            name=\"month\"\n                                                                                            value={valueMonths(\n                                                                                                formData.month\n                                                                                            )}\n                                                                                            options={\n                                                                                                months\n                                                                                            }\n                                                                                            onChange={event =>\n                                                                                                this.onChange(\n                                                                                                    [\n                                                                                                        'month'\n                                                                                                    ],\n                                                                                                    event.value\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                        <FormText className=\"help-block\">\n                                                                                            Seleccione\n                                                                                            mes\n                                                                                            *Obligatorio\n                                                                                        </FormText>\n                                                                                    </FormGroup>\n                                                                                </Col>\n                                                                            </Row>\n                                                                        ) : null}\n                                                                        {this\n                                                                            .state\n                                                                            .selectedOption ===\n                                                                        'range' ? (\n                                                                            <Row>\n                                                                                <Col\n                                                                                    md={\n                                                                                        6\n                                                                                    }\n                                                                                >\n                                                                                    <label htmlFor=\"periodoInicio\">\n                                                                                        Fecha\n                                                                                        Inicial\n                                                                                    </label>\n                                                                                    <input\n                                                                                        type=\"date\"\n                                                                                        className=\"form-control\"\n                                                                                        id=\"periodoInicio\"\n                                                                                        value={\n                                                                                            formData.periodoInicio\n                                                                                        }\n                                                                                        onChange={event =>\n                                                                                            this.onChange(\n                                                                                                'periodoInicio',\n                                                                                                event\n                                                                                                    .target\n                                                                                                    .value\n                                                                                            )\n                                                                                        }\n                                                                                    />\n                                                                                </Col>\n                                                                                <Col\n                                                                                    md={\n                                                                                        6\n                                                                                    }\n                                                                                >\n                                                                                    <label htmlFor=\"periodoFin\">\n                                                                                        Fecha\n                                                                                        Final\n                                                                                    </label>\n                                                                                    <input\n                                                                                        type=\"date\"\n                                                                                        className=\"form-control\"\n                                                                                        id=\"periodoFin\"\n                                                                                        value={\n                                                                                            formData.periodoFin\n                                                                                        }\n                                                                                        onChange={event =>\n                                                                                            this.onChange(\n                                                                                                'periodoFin',\n                                                                                                event\n                                                                                                    .target\n                                                                                                    .value\n                                                                                            )\n                                                                                        }\n                                                                                    />\n                                                                                </Col>\n                                                                            </Row>\n                                                                        ) : null}\n                                                                    </Card>\n                                                                ) : null}\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col md={12}>\n                                                                <br />\n                                                                <Button\n                                                                    className=\"btn-square pull-right\"\n                                                                    style={{\n                                                                        background:\n                                                                            '#003c53',\n                                                                        color:\n                                                                            'white'\n                                                                    }}\n                                                                    onClick={\n                                                                        this\n                                                                            .onAddInvoicesCalculator\n                                                                    }\n                                                                >\n                                                                    {/* //DONE Paty - Hacer que te envíe a Editar */}\n                                                                    GENERAR\n                                                                    FACTURA\n                                                                </Button>\n                                                                <br />\n                                                            </Col>\n                                                        </Row>\n                                                    </Card>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n                                    </Row>\n                                    {loadInvoice ? (\n                                        <Row>\n                                            <Col md={{ size: 6, offset: 3 }}>\n                                                <Row>\n                                                    <Col md={4}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-center\"\n                                                        >\n                                                            Energía :{' '}\n                                                            {resume.energy\n                                                                ? numeral(\n                                                                      resume.energy\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                    <Col md={4}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-center\"\n                                                        >\n                                                            Potencia :{' '}\n                                                            {resume.potency\n                                                                ? numeral(\n                                                                      resume.potency\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                    <Col md={4}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-center\"\n                                                        >\n                                                            Factor Potencia :{' '}\n                                                            {resume.powerFactor\n                                                                ? numeral(\n                                                                      resume.powerFactor\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <BootstrapTable\n                                                        keyField=\"concepto\"\n                                                        data={this.state.data}\n                                                        columns={columns}\n                                                        bootstrap4\n                                                        striped\n                                                        hover\n                                                    />\n                                                </Row>\n                                                <Row>\n                                                    <Col md={12}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-right\"\n                                                        >\n                                                            Subtotal General:{' '}\n                                                            {resume.subtotal\n                                                                ? numeral(\n                                                                      resume.subtotal\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md={12}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-right\"\n                                                        >\n                                                            I.V.A :{' '}\n                                                            {resume.iva\n                                                                ? numeral(\n                                                                      resume.iva\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md={12}>\n                                                        <div\n                                                            style={{\n                                                                fontSize:\n                                                                    '16px',\n                                                                fontWeight:\n                                                                    'bold'\n                                                            }}\n                                                            className=\"pull-right\"\n                                                        >\n                                                            Total :{' '}\n                                                            {resume.total\n                                                                ? numeral(\n                                                                      resume.total\n                                                                  ).format(\n                                                                      '0.00'\n                                                                  )\n                                                                : ''}\n                                                        </div>\n                                                        <br />\n                                                        <br />\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <Button\n                                                            style={{\n                                                                marginTop: 10\n                                                            }}\n                                                            className=\"btn-square pull-right\"\n                                                            color=\"success\"\n                                                            onClick={\n                                                                this\n                                                                    .onSaveInvoices\n                                                            }\n                                                        >\n                                                            GUARDAR\n                                                        </Button>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    ) : null}\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default InvoiceForm;\n"],"sourceRoot":""}